// AUTOMATICALLY GENERATED BY OPENFEATURE CLI, DO NOT EDIT.
package com.example.openfeature;

import dev.openfeature.sdk.Client;
import dev.openfeature.sdk.EvaluationContext;
import dev.openfeature.sdk.EvaluationDetails;
import dev.openfeature.sdk.OpenFeature;
import dev.openfeature.sdk.OpenFeatureAPI;

public class GeneratedClient {

    private final Client client;

    public GeneratedClient(Client client) {
        this.client = client;
    }

    public static GeneratedClient createClient() {
        return new GeneratedClient(OpenFeatureAPI.getInstance().getClient());
    }

    public static GeneratedClient createClient(String domain) {
        return new GeneratedClient(OpenFeatureAPI.getInstance().getClient(domain));
    }


    /**
     * Discount percentage applied to purchases.
     * Details:
     * - Flag key: discountPercentage
     * - Type: float
     * - Default value: 0.15
     */
    public float discountPercentage(EvaluationContext ctx) {
        return client.getFloatValue("discountPercentage", 0.15, ctx);
    }

    public EvaluationDetails<float> discountPercentageDetails(EvaluationContext ctx) {
        return client.getFloatDetails("discountPercentage", 0.15, ctx);
    }

    /**
     * Controls whether Feature A is enabled.
     * Details:
     * - Flag key: enableFeatureA
     * - Type: boolean
     * - Default value: false
     */
    public boolean enableFeatureA(EvaluationContext ctx) {
        return client.getBooleanValue("enableFeatureA", false, ctx);
    }

    public EvaluationDetails<boolean> enableFeatureADetails(EvaluationContext ctx) {
        return client.getBooleanDetails("enableFeatureA", false, ctx);
    }

    /**
     * The message to use for greeting users.
     * Details:
     * - Flag key: greetingMessage
     * - Type: String
     * - Default value: Hello there!
     */
    public String greetingMessage(EvaluationContext ctx) {
        return client.getStringValue("greetingMessage", "Hello there!", ctx);
    }

    public EvaluationDetails<String> greetingMessageDetails(EvaluationContext ctx) {
        return client.getStringDetails("greetingMessage", "Hello there!", ctx);
    }

    /**
     * Maximum allowed length for usernames.
     * Details:
     * - Flag key: usernameMaxLength
     * - Type: int
     * - Default value: 50
     */
    public int usernameMaxLength(EvaluationContext ctx) {
        return client.getIntValue("usernameMaxLength", 50, ctx);
    }

    public EvaluationDetails<int> usernameMaxLengthDetails(EvaluationContext ctx) {
        return client.getIntDetails("usernameMaxLength", 50, ctx);
    }

}
