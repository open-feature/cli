// Package pushclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package pushclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ManifestFlagType.
const (
	ManifestFlagTypeBoolean ManifestFlagType = "boolean"
	ManifestFlagTypeInteger ManifestFlagType = "integer"
	ManifestFlagTypeObject  ManifestFlagType = "object"
	ManifestFlagTypeString  ManifestFlagType = "string"
)

// Defines values for PostApiV1ManifestFlagsJSONBodyType.
const (
	PostApiV1ManifestFlagsJSONBodyTypeBoolean PostApiV1ManifestFlagsJSONBodyType = "boolean"
	PostApiV1ManifestFlagsJSONBodyTypeInteger PostApiV1ManifestFlagsJSONBodyType = "integer"
	PostApiV1ManifestFlagsJSONBodyTypeObject  PostApiV1ManifestFlagsJSONBodyType = "object"
	PostApiV1ManifestFlagsJSONBodyTypeString  PostApiV1ManifestFlagsJSONBodyType = "string"
)

// Defines values for PutApiV1ManifestFlagsKeyJSONBodyType.
const (
	Boolean PutApiV1ManifestFlagsKeyJSONBodyType = "boolean"
	Integer PutApiV1ManifestFlagsKeyJSONBodyType = "integer"
	Object  PutApiV1ManifestFlagsKeyJSONBodyType = "object"
	String  PutApiV1ManifestFlagsKeyJSONBodyType = "string"
)

// ArchiveResponse defines model for ArchiveResponse.
type ArchiveResponse struct {
	// ArchivedAt Timestamp recording when the flag was archived.
	ArchivedAt *time.Time `json:"archivedAt"`
	Message    string     `json:"message"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Code Short machine-readable code (matches Zod issue codes).
	Code *string `json:"code,omitempty"`

	// Field Field path related to the error.
	Field *string `json:"field,omitempty"`

	// Message Human-friendly error message.
	Message *string `json:"message,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error struct {
		Details *[]ErrorDetail `json:"details,omitempty"`
		Message string         `json:"message"`
		Status  int            `json:"status"`
	} `json:"error"`
}

// FlagDefaultValue Default value for a flag (can be boolean, string, integer, or object)
type FlagDefaultValue struct {
	union json.RawMessage
}

// FlagDefaultValue0 defines model for .
type FlagDefaultValue0 = bool

// FlagDefaultValue1 defines model for .
type FlagDefaultValue1 = string

// FlagDefaultValue2 defines model for .
type FlagDefaultValue2 = int

// FlagDefaultValue3 defines model for .
type FlagDefaultValue3 = map[string]interface{}

// ManifestEnvelope defines model for ManifestEnvelope.
type ManifestEnvelope struct {
	Flags []ManifestFlag `json:"flags"`
}

// ManifestFlag defines model for ManifestFlag.
type ManifestFlag struct {
	// DefaultValue Default value for a flag (can be boolean, string, integer, or object)
	DefaultValue FlagDefaultValue `json:"defaultValue"`

	// Description Optional flag description.
	Description *string `json:"description"`

	// Key Unique flag key within the flag set.
	Key string `json:"key"`

	// Name Human-friendly flag name. Defaults to the key when omitted.
	Name *string `json:"name,omitempty"`

	// Type Flag data type.
	Type ManifestFlagType `json:"type"`
}

// ManifestFlagType Flag data type.
type ManifestFlagType string

// ManifestFlagResponse defines model for ManifestFlagResponse.
type ManifestFlagResponse struct {
	Flag ManifestFlag `json:"flag"`

	// UpdatedAt ISO timestamp reflecting the last update to the flag record. Clients can use this to
	// detect changes between manifest fetches or to implement optimistic concurrency checks.
	UpdatedAt time.Time `json:"updatedAt"`
}

// PostApiV1ManifestFlagsJSONBody defines parameters for PostApiV1ManifestFlags.
type PostApiV1ManifestFlagsJSONBody struct {
	// DefaultValue Default value for a flag (can be boolean, string, integer, or object)
	DefaultValue FlagDefaultValue `json:"defaultValue"`
	Description  *string          `json:"description"`
	Key          string           `json:"key"`

	// Name Optional display name. Defaults to the key.
	Name *string                            `json:"name,omitempty"`
	Type PostApiV1ManifestFlagsJSONBodyType `json:"type"`
}

// PostApiV1ManifestFlagsJSONBodyType defines parameters for PostApiV1ManifestFlags.
type PostApiV1ManifestFlagsJSONBodyType string

// PutApiV1ManifestFlagsKeyJSONBody defines parameters for PutApiV1ManifestFlagsKey.
type PutApiV1ManifestFlagsKeyJSONBody struct {
	// DefaultValue Default value for a flag (can be boolean, string, integer, or object)
	DefaultValue *FlagDefaultValue                    `json:"defaultValue,omitempty"`
	Description  *string                              `json:"description"`
	Key          string                               `json:"key"`
	Name         *string                              `json:"name,omitempty"`
	Type         PutApiV1ManifestFlagsKeyJSONBodyType `json:"type"`
}

// PutApiV1ManifestFlagsKeyJSONBodyType defines parameters for PutApiV1ManifestFlagsKey.
type PutApiV1ManifestFlagsKeyJSONBodyType string

// PostApiV1ManifestFlagsJSONRequestBody defines body for PostApiV1ManifestFlags for application/json ContentType.
type PostApiV1ManifestFlagsJSONRequestBody PostApiV1ManifestFlagsJSONBody

// PutApiV1ManifestFlagsKeyJSONRequestBody defines body for PutApiV1ManifestFlagsKey for application/json ContentType.
type PutApiV1ManifestFlagsKeyJSONRequestBody PutApiV1ManifestFlagsKeyJSONBody

// AsFlagDefaultValue0 returns the union data inside the FlagDefaultValue as a FlagDefaultValue0
func (t FlagDefaultValue) AsFlagDefaultValue0() (FlagDefaultValue0, error) {
	var body FlagDefaultValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlagDefaultValue0 overwrites any union data inside the FlagDefaultValue as the provided FlagDefaultValue0
func (t *FlagDefaultValue) FromFlagDefaultValue0(v FlagDefaultValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlagDefaultValue0 performs a merge with any union data inside the FlagDefaultValue, using the provided FlagDefaultValue0
func (t *FlagDefaultValue) MergeFlagDefaultValue0(v FlagDefaultValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFlagDefaultValue1 returns the union data inside the FlagDefaultValue as a FlagDefaultValue1
func (t FlagDefaultValue) AsFlagDefaultValue1() (FlagDefaultValue1, error) {
	var body FlagDefaultValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlagDefaultValue1 overwrites any union data inside the FlagDefaultValue as the provided FlagDefaultValue1
func (t *FlagDefaultValue) FromFlagDefaultValue1(v FlagDefaultValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlagDefaultValue1 performs a merge with any union data inside the FlagDefaultValue, using the provided FlagDefaultValue1
func (t *FlagDefaultValue) MergeFlagDefaultValue1(v FlagDefaultValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFlagDefaultValue2 returns the union data inside the FlagDefaultValue as a FlagDefaultValue2
func (t FlagDefaultValue) AsFlagDefaultValue2() (FlagDefaultValue2, error) {
	var body FlagDefaultValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlagDefaultValue2 overwrites any union data inside the FlagDefaultValue as the provided FlagDefaultValue2
func (t *FlagDefaultValue) FromFlagDefaultValue2(v FlagDefaultValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlagDefaultValue2 performs a merge with any union data inside the FlagDefaultValue, using the provided FlagDefaultValue2
func (t *FlagDefaultValue) MergeFlagDefaultValue2(v FlagDefaultValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFlagDefaultValue3 returns the union data inside the FlagDefaultValue as a FlagDefaultValue3
func (t FlagDefaultValue) AsFlagDefaultValue3() (FlagDefaultValue3, error) {
	var body FlagDefaultValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlagDefaultValue3 overwrites any union data inside the FlagDefaultValue as the provided FlagDefaultValue3
func (t *FlagDefaultValue) FromFlagDefaultValue3(v FlagDefaultValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlagDefaultValue3 performs a merge with any union data inside the FlagDefaultValue, using the provided FlagDefaultValue3
func (t *FlagDefaultValue) MergeFlagDefaultValue3(v FlagDefaultValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FlagDefaultValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FlagDefaultValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1Manifest request
	GetApiV1Manifest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1ManifestFlagsWithBody request with any body
	PostApiV1ManifestFlagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1ManifestFlags(ctx context.Context, body PostApiV1ManifestFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiV1ManifestFlagsKey request
	DeleteApiV1ManifestFlagsKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1ManifestFlagsKeyWithBody request with any body
	PutApiV1ManifestFlagsKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1ManifestFlagsKey(ctx context.Context, key string, body PutApiV1ManifestFlagsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1Manifest(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ManifestRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ManifestFlagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ManifestFlagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1ManifestFlags(ctx context.Context, body PostApiV1ManifestFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1ManifestFlagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiV1ManifestFlagsKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiV1ManifestFlagsKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ManifestFlagsKeyWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ManifestFlagsKeyRequestWithBody(c.Server, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1ManifestFlagsKey(ctx context.Context, key string, body PutApiV1ManifestFlagsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1ManifestFlagsKeyRequest(c.Server, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1ManifestRequest generates requests for GetApiV1Manifest
func NewGetApiV1ManifestRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/manifest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1ManifestFlagsRequest calls the generic PostApiV1ManifestFlags builder with application/json body
func NewPostApiV1ManifestFlagsRequest(server string, body PostApiV1ManifestFlagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1ManifestFlagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1ManifestFlagsRequestWithBody generates requests for PostApiV1ManifestFlags with any type of body
func NewPostApiV1ManifestFlagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/manifest/flags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiV1ManifestFlagsKeyRequest generates requests for DeleteApiV1ManifestFlagsKey
func NewDeleteApiV1ManifestFlagsKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/manifest/flags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1ManifestFlagsKeyRequest calls the generic PutApiV1ManifestFlagsKey builder with application/json body
func NewPutApiV1ManifestFlagsKeyRequest(server string, key string, body PutApiV1ManifestFlagsKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1ManifestFlagsKeyRequestWithBody(server, key, "application/json", bodyReader)
}

// NewPutApiV1ManifestFlagsKeyRequestWithBody generates requests for PutApiV1ManifestFlagsKey with any type of body
func NewPutApiV1ManifestFlagsKeyRequestWithBody(server string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/manifest/flags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1ManifestWithResponse request
	GetApiV1ManifestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ManifestResponse, error)

	// PostApiV1ManifestFlagsWithBodyWithResponse request with any body
	PostApiV1ManifestFlagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ManifestFlagsResponse, error)

	PostApiV1ManifestFlagsWithResponse(ctx context.Context, body PostApiV1ManifestFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ManifestFlagsResponse, error)

	// DeleteApiV1ManifestFlagsKeyWithResponse request
	DeleteApiV1ManifestFlagsKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteApiV1ManifestFlagsKeyResponse, error)

	// PutApiV1ManifestFlagsKeyWithBodyWithResponse request with any body
	PutApiV1ManifestFlagsKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ManifestFlagsKeyResponse, error)

	PutApiV1ManifestFlagsKeyWithResponse(ctx context.Context, key string, body PutApiV1ManifestFlagsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ManifestFlagsKeyResponse, error)
}

type GetApiV1ManifestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManifestEnvelope
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1ManifestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ManifestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1ManifestFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ManifestFlagResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1ManifestFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1ManifestFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiV1ManifestFlagsKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArchiveResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiV1ManifestFlagsKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiV1ManifestFlagsKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1ManifestFlagsKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManifestFlagResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutApiV1ManifestFlagsKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1ManifestFlagsKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1ManifestWithResponse request returning *GetApiV1ManifestResponse
func (c *ClientWithResponses) GetApiV1ManifestWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ManifestResponse, error) {
	rsp, err := c.GetApiV1Manifest(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ManifestResponse(rsp)
}

// PostApiV1ManifestFlagsWithBodyWithResponse request with arbitrary body returning *PostApiV1ManifestFlagsResponse
func (c *ClientWithResponses) PostApiV1ManifestFlagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1ManifestFlagsResponse, error) {
	rsp, err := c.PostApiV1ManifestFlagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ManifestFlagsResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1ManifestFlagsWithResponse(ctx context.Context, body PostApiV1ManifestFlagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1ManifestFlagsResponse, error) {
	rsp, err := c.PostApiV1ManifestFlags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1ManifestFlagsResponse(rsp)
}

// DeleteApiV1ManifestFlagsKeyWithResponse request returning *DeleteApiV1ManifestFlagsKeyResponse
func (c *ClientWithResponses) DeleteApiV1ManifestFlagsKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*DeleteApiV1ManifestFlagsKeyResponse, error) {
	rsp, err := c.DeleteApiV1ManifestFlagsKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiV1ManifestFlagsKeyResponse(rsp)
}

// PutApiV1ManifestFlagsKeyWithBodyWithResponse request with arbitrary body returning *PutApiV1ManifestFlagsKeyResponse
func (c *ClientWithResponses) PutApiV1ManifestFlagsKeyWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1ManifestFlagsKeyResponse, error) {
	rsp, err := c.PutApiV1ManifestFlagsKeyWithBody(ctx, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ManifestFlagsKeyResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1ManifestFlagsKeyWithResponse(ctx context.Context, key string, body PutApiV1ManifestFlagsKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1ManifestFlagsKeyResponse, error) {
	rsp, err := c.PutApiV1ManifestFlagsKey(ctx, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1ManifestFlagsKeyResponse(rsp)
}

// ParseGetApiV1ManifestResponse parses an HTTP response from a GetApiV1ManifestWithResponse call
func ParseGetApiV1ManifestResponse(rsp *http.Response) (*GetApiV1ManifestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ManifestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManifestEnvelope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1ManifestFlagsResponse parses an HTTP response from a PostApiV1ManifestFlagsWithResponse call
func ParsePostApiV1ManifestFlagsResponse(rsp *http.Response) (*PostApiV1ManifestFlagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1ManifestFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ManifestFlagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiV1ManifestFlagsKeyResponse parses an HTTP response from a DeleteApiV1ManifestFlagsKeyWithResponse call
func ParseDeleteApiV1ManifestFlagsKeyResponse(rsp *http.Response) (*DeleteApiV1ManifestFlagsKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiV1ManifestFlagsKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArchiveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePutApiV1ManifestFlagsKeyResponse parses an HTTP response from a PutApiV1ManifestFlagsKeyWithResponse call
func ParsePutApiV1ManifestFlagsKeyResponse(rsp *http.Response) (*PutApiV1ManifestFlagsKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1ManifestFlagsKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManifestFlagResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
