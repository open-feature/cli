# AUTOMATICALLY GENERATED BY OPENFEATURE CLI, DO NOT EDIT.
from typing import Optional

from openfeature.client import OpenFeatureClient
from openfeature.evaluation_context import EvaluationContext 
from openfeature.flag_evaluation import FlagEvaluationDetails, FlagEvaluationOptions
from openfeature.hook import Hook


class GeneratedClient:
    def __init__(
        self,
        client: OpenFeatureClient,
    ) -> None:
        self.client = client

    def discount_percentage(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> float:
        """
        Discount percentage applied to purchases.

        **Details:**
        - flag key: `discountPercentage`
        - default value: `0.15`
        - type: `float`
        
        Performs a flag evaluation that returns a `float`.
        """
        return self.client.get_float_value(
            flag_key="discountPercentage",
            default_value=0.15,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    def discount_percentage_details(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> FlagEvaluationDetails:
        """
        Discount percentage applied to purchases.

        **Details:**
        - flag key: `discountPercentage`
        - default value: `0.15`
        - type: `float`
        
        Performs a flag evaluation that returns a `FlagEvaluationDetails` instance.
        """
        return self.client.get_float_details(
            flag_key="discountPercentage",
            default_value=0.15,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    async def discount_percentage_async(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> float:
        """
        Discount percentage applied to purchases.

        **Details:**
        - flag key: `discountPercentage`
        - default value: `0.15`
        - type: `float`
        
        Performs a flag evaluation asynchronously and returns a `float`.
        """
        return await self.client.get_float_value_async(
            flag_key="discountPercentage",
            default_value=0.15,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    async def discount_percentage_details_async(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> FlagEvaluationDetails:
        """
        Discount percentage applied to purchases.

        **Details:**
        - flag key: `discountPercentage`
        - default value: `0.15`
        - type: `float`
        
        Performs a flag evaluation asynchronously and returns a `FlagEvaluationDetails` instance.
        """
        return await self.client.get_float_details_async(
            flag_key="discountPercentage",
            default_value=0.15,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )

    def enable_feature_a(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> bool:
        """
        Controls whether Feature A is enabled.

        **Details:**
        - flag key: `enableFeatureA`
        - default value: `False`
        - type: `bool`
        
        Performs a flag evaluation that returns a `bool`.
        """
        return self.client.get_boolean_value(
            flag_key="enableFeatureA",
            default_value=False,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    def enable_feature_a_details(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> FlagEvaluationDetails:
        """
        Controls whether Feature A is enabled.

        **Details:**
        - flag key: `enableFeatureA`
        - default value: `False`
        - type: `bool`
        
        Performs a flag evaluation that returns a `FlagEvaluationDetails` instance.
        """
        return self.client.get_boolean_details(
            flag_key="enableFeatureA",
            default_value=False,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    async def enable_feature_a_async(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> bool:
        """
        Controls whether Feature A is enabled.

        **Details:**
        - flag key: `enableFeatureA`
        - default value: `False`
        - type: `bool`
        
        Performs a flag evaluation asynchronously and returns a `bool`.
        """
        return await self.client.get_boolean_value_async(
            flag_key="enableFeatureA",
            default_value=False,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    async def enable_feature_a_details_async(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> FlagEvaluationDetails:
        """
        Controls whether Feature A is enabled.

        **Details:**
        - flag key: `enableFeatureA`
        - default value: `False`
        - type: `bool`
        
        Performs a flag evaluation asynchronously and returns a `FlagEvaluationDetails` instance.
        """
        return await self.client.get_boolean_details_async(
            flag_key="enableFeatureA",
            default_value=False,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )

    def greeting_message(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> str:
        """
        The message to use for greeting users.

        **Details:**
        - flag key: `greetingMessage`
        - default value: `Hello there!`
        - type: `str`
        
        Performs a flag evaluation that returns a `str`.
        """
        return self.client.get_string_value(
            flag_key="greetingMessage",
            default_value="Hello there!",
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    def greeting_message_details(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> FlagEvaluationDetails:
        """
        The message to use for greeting users.

        **Details:**
        - flag key: `greetingMessage`
        - default value: `Hello there!`
        - type: `str`
        
        Performs a flag evaluation that returns a `FlagEvaluationDetails` instance.
        """
        return self.client.get_string_details(
            flag_key="greetingMessage",
            default_value="Hello there!",
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    async def greeting_message_async(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> str:
        """
        The message to use for greeting users.

        **Details:**
        - flag key: `greetingMessage`
        - default value: `Hello there!`
        - type: `str`
        
        Performs a flag evaluation asynchronously and returns a `str`.
        """
        return await self.client.get_string_value_async(
            flag_key="greetingMessage",
            default_value="Hello there!",
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    async def greeting_message_details_async(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> FlagEvaluationDetails:
        """
        The message to use for greeting users.

        **Details:**
        - flag key: `greetingMessage`
        - default value: `Hello there!`
        - type: `str`
        
        Performs a flag evaluation asynchronously and returns a `FlagEvaluationDetails` instance.
        """
        return await self.client.get_string_details_async(
            flag_key="greetingMessage",
            default_value="Hello there!",
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )

    def username_max_length(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> int:
        """
        Maximum allowed length for usernames.

        **Details:**
        - flag key: `usernameMaxLength`
        - default value: `50`
        - type: `int`
        
        Performs a flag evaluation that returns a `int`.
        """
        return self.client.get_integer_value(
            flag_key="usernameMaxLength",
            default_value=50,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    def username_max_length_details(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> FlagEvaluationDetails:
        """
        Maximum allowed length for usernames.

        **Details:**
        - flag key: `usernameMaxLength`
        - default value: `50`
        - type: `int`
        
        Performs a flag evaluation that returns a `FlagEvaluationDetails` instance.
        """
        return self.client.get_integer_details(
            flag_key="usernameMaxLength",
            default_value=50,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    async def username_max_length_async(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> int:
        """
        Maximum allowed length for usernames.

        **Details:**
        - flag key: `usernameMaxLength`
        - default value: `50`
        - type: `int`
        
        Performs a flag evaluation asynchronously and returns a `int`.
        """
        return await self.client.get_integer_value_async(
            flag_key="usernameMaxLength",
            default_value=50,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )
    
    async def username_max_length_details_async(
        self,
        evaluation_context: Optional[EvaluationContext] = None,
        flag_evaluation_options: Optional[FlagEvaluationOptions] = None,
    ) -> FlagEvaluationDetails:
        """
        Maximum allowed length for usernames.

        **Details:**
        - flag key: `usernameMaxLength`
        - default value: `50`
        - type: `int`
        
        Performs a flag evaluation asynchronously and returns a `FlagEvaluationDetails` instance.
        """
        return await self.client.get_integer_details_async(
            flag_key="usernameMaxLength",
            default_value=50,
            evaluation_context=evaluation_context,
            flag_evaluation_options=flag_evaluation_options,
        )


def get_generated_client(
    client: Optional[OpenFeatureClient] = None,
    domain: Optional[str] = None,
    version: Optional[str] = None,
    context: Optional[EvaluationContext] = None,
    hooks: Optional[list[Hook]] = None,
) -> GeneratedClient:
    if not client:
        client = OpenFeatureClient(
            domain=domain,
            version=version,
            context=context,
            hooks=hooks,
        )
    return GeneratedClient(client)
